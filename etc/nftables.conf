#!/usr/bin/nft -f

flush ruleset

table inet filter {
  chain input {
    type filter hook input priority 0; policy drop

    ct state {established, related} accept
    ct state invalid drop
    iifname lo accept
    ip protocol icmp accept
    ip6 nexthdr icmpv6 accept

    ip saddr 192.168.0.0/24 tcp dport 8080 accept
    tcp dport 23555 accept

    reject with icmpx type port-unreachable
  }

  chain forward {
    type filter hook forward priority 0; policy drop

    ip saddr 172.0.0.0/8 accept # Allow outbound connection from docker.
    ip daddr 172.0.0.0/8 ct state {established, related} accept # Allow inbound packages to docker if it is a established connection.

    # Test my dev website on my phone and tablets
    ip saddr 192.168.0.0/16 tcp dport 80 accept
    ip saddr 192.168.0.0/16 tcp dport 8080 accept

    reject with icmpx type port-unreachable
  }

  chain output {
    type filter hook output priority 0; policy accept;
    accept
  }

}

table ip nat {
  # Transparent proxy

  chain prerouting {
    type nat hook prerouting priority 0; policy accept;
    ip daddr [ip address of v2ray proxy] tcp dport 443 accept
    ip daddr 10.0.0.0/8 accept
    ip daddr 127.0.0.0/8 accept
    ip daddr 172.16.0.0/12 accept
    ip daddr 192.168.0.0/16 accept
    tcp dport 1-65535 dnat to 172.17.0.1:23555
    # udp dport 1-65535 dnat to 172.17.0.1:23555 ## it dosen't work, for some reason
  }

  chain output {
    type nat hook output priority 0; policy accept;

    ip daddr [ip address of v2ray proxy] tcp dport 443 accept
    ip daddr 10.0.0.0/8 accept
    ip daddr 127.0.0.0/8 accept
    ip daddr 172.16.0.0/12 accept
    ip daddr 192.168.0.0/16 accept
    tcp dport 1-65535 dnat to 172.17.0.1:23555
    # udp dport 1-65535 dnat to 127.0.0.1:23555 ## it dosen't work, for some reason
  }

  chain postrouting {
    type nat hook postrouting priority 100; policy accept;
  }
}

# vim:set ts=2 sw=2 et:
